<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>working sharing | AI4network Group</title>
    <link>https://ai4network.github.io/tag/working-sharing/</link>
      <atom:link href="https://ai4network.github.io/tag/working-sharing/index.xml" rel="self" type="application/rss+xml" />
    <description>working sharing</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 07 Oct 2023 10:52:45 +0800</lastBuildDate>
    <image>
      <url>https://ai4network.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>working sharing</title>
      <link>https://ai4network.github.io/tag/working-sharing/</link>
    </image>
    
    <item>
      <title>Smart-Flycast：基于无人机平台的多路径实时视频传输系统</title>
      <link>https://ai4network.github.io/event/work-sharing-3/</link>
      <pubDate>Sat, 07 Oct 2023 10:52:45 +0800</pubDate>
      <guid>https://ai4network.github.io/event/work-sharing-3/</guid>
      <description>&lt;p&gt;  近年来，无人机凭借其灵活操控、视角广阔、移动性强等优势，被广泛应用于大型赛事直播、应急救援、目标识别等领域。然而，由于无人机飞行高速移动过程中带来网络质量频繁波动，尤其是采用基站入网方式的无人机在飞行过程中需要频繁切换入网点，往往无法满足高清视频传输所需的高带宽、低时延、小抖动等传输需求，更无法针对特殊应用提供定制化的服务质量（QoS）和用户体验（QoE）。&lt;/p&gt;
&lt;p&gt;  为此，AI4Network研究团队将多路径技术引入无人机实时视频传输过程，开发研制了智能多路径无人机实时视频传输系统Smart-Flycast，旨在通过增加无人机平台的网络链路数量，提供视频传输的带宽聚合与并行传输能力，提升传输稳定性和可靠性。该系统的核心特性是智能跨层传输协议，集成典型流媒体传输协议集，底层可灵活适配多种传输协议，并支持自研的传输算法库，可实现应用协议、传输协议、控制决策算法三个层次的传输方案集成创新，增强了无人机流媒体传输在动态网络环境中的自适应能力，以及面向多种视频应用需求的可扩展性。&lt;/p&gt;
&lt;p&gt;  目前，基于Smart-Flycast的研究工作已被网络领域国际顶级杂志IEEE Network Magazine（影响因子9.3）录用[1]。该工作结合“AI for Network”思路，通过智能算法的自适应能力辅助多路径报文调度和传输控制，为研究使能网络的人工智能技术提供了新的思路和应用场景。IEEE Network是网络领域知名刊物，专注于网络通信领域的重要问题和发展趋势。该工作作者为2020级博士研究生宋丛溪（第一作者）、2023级博士研究生计晓岚、2020级硕士研究生李亚辉、指导老师为韩彪副研究员、苏金树研究员。&lt;/p&gt;
&lt;h2 id=&#34;一smart-flycast演示视频&#34;&gt;一、Smart-Flycast演示视频&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://mpvideo.qpic.cn/0bc3v4aa4aaaqeajnrqsobsvbl6db2xqadqa.f10002.mp4?dis_k=f0b26e84321d30465ae920fbbe7859bb&amp;amp;dis_t=1696644840&amp;amp;play_scene=10120&amp;amp;auth_info=fvbxvikUf235xI22V107a2pJNjhlTzpmGX8ZUmpvS0pHdnZ5YkkQDzBVcWB2SgFh&amp;amp;auth_key=82e9f292231a4783724468c243e2cf6c&amp;amp;vid=wxv_3122661875554713606&amp;amp;format_id=10002&amp;amp;support_redirect=0&amp;amp;mmversion=false&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;视频地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;二smart-flycast系统架构&#34;&gt;二、Smart-Flycast系统架构&lt;/h2&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1-smart-flycast系统架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture1&#34; srcset=&#34;
               /event/work-sharing-3/picture/picture1_huc14adf2d2e0489bdd49c13a2226cf2fd_296203_e65d4b831d407195bc7cebfd2286e8a1.webp 400w,
               /event/work-sharing-3/picture/picture1_huc14adf2d2e0489bdd49c13a2226cf2fd_296203_df65ea153c9ea53470f31d1d0f80977c.webp 760w,
               /event/work-sharing-3/picture/picture1_huc14adf2d2e0489bdd49c13a2226cf2fd_296203_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-3/picture/picture1_huc14adf2d2e0489bdd49c13a2226cf2fd_296203_e65d4b831d407195bc7cebfd2286e8a1.webp&#34;
               width=&#34;760&#34;
               height=&#34;331&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1 Smart-Flycast系统架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;  Smart-Flycast系统架构如图1所示，包括载有摄像头和机载计算机的无人机、接收和转发实时流的云服务器以及客户端视频播放器。其中机载计算机部署了智能跨层传输协议栈。端到端的实时流媒体传输过程包括以下步骤:&lt;/p&gt;
&lt;p&gt;  首先，传输模块从机载摄像头获取视频流并通过多个网卡（如WiFi、4G和5G）将其分发到云服务器。而后，云服务器汇聚并转发实时流。在客户端，订阅者通过视频播放器从云服务器拉取实时视频进行观看。Smart-Flycast系统的核心设计为智能跨层传输协议。&lt;/p&gt;
&lt;h2 id=&#34;三智能跨层传输协议&#34;&gt;三、智能跨层传输协议&lt;/h2&gt;
&lt;p&gt;  智能跨层传输协议分为三个层次，集成了流媒体传输协议集、底层可灵活适配多种传输协议，并支持自研的传输算法库，可实现应用层协议、传输层协议、传输决策算法三种层次的传输方案组合，增强了无人机流媒体传输在动态网络环境中的自适应能力，以及面向多种视频应用需求的可扩展性。如图2所示，应用层的流媒体传输协议集支持多种流媒体传输协议，包括RTMP、RTSP和RTP；传输层支持TCP、QUIC以及多路径扩展MPTCP、MPQUIC，可根据视频传输需求跨层适配协议；传输层内置了传输算法库，支持报文调度算法RR、minRTT、ECF、BLEST、RDDT、DRAMA等，拥塞控制算法CUBIC、Olia、BBR等，可根据网络状态切换传输策略。在此基础上，开发并部署了智能算法驱动的三种传输策略，分别是基于决策树的自适应多路径报文调度DRAMA、面向QoS的自适应多路径拥塞控制ACCeSS[2]、视频内容感知的部分可靠传输算法VICTOR[3]。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2-智能跨层传输协议&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture2&#34; srcset=&#34;
               /event/work-sharing-3/picture/picture2_hu3f91bcd9f58fd2f9e18258ea1c05e26d_458143_6c6850f5a98a8c93e32819af0be14ca7.webp 400w,
               /event/work-sharing-3/picture/picture2_hu3f91bcd9f58fd2f9e18258ea1c05e26d_458143_47297b26449e01040250e96be236d09d.webp 760w,
               /event/work-sharing-3/picture/picture2_hu3f91bcd9f58fd2f9e18258ea1c05e26d_458143_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-3/picture/picture2_hu3f91bcd9f58fd2f9e18258ea1c05e26d_458143_6c6850f5a98a8c93e32819af0be14ca7.webp&#34;
               width=&#34;662&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2 智能跨层传输协议
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;（1）基于决策树的自适应多路径报文调度&lt;/p&gt;
&lt;p&gt;  异构链路以及无人机飞行期间的网络波动会导致路径状态的差异性增大，MPTCP和MPQUIC的默认报文调度器会产生不合理的决策，导致报文乱序到达从而降低应用的QoS和QoE。为了解决这个问题，使用决策树模型根据网络条件选择适合当前状态的策略。三个子策略包括，“分发”，“复制”和“丢弃”。“分发”策略根据网络状态计算每条路径的报文分配量，使报文尽可能按序到达接收端；“复制”策略将高优先级的报文复制发送到所有路径以保持传输可靠性。“丢弃”策略会主动丢弃低优先级数据的报文，以提供给高优先级报文充足带宽。&lt;/p&gt;
&lt;p&gt;（2）面向QoS的自适应多路径拥塞控制&lt;/p&gt;
&lt;p&gt;  为了满足在无人机动态网络环境的多种QoS，ACCeSS面向吞吐量、丢包以及延迟三种QoS设计效用函数，针对每种类型的QoS要求，ACCeSS求解一个特定QoS的最优问题。ACCeSS包含在线速率控制和离线训练两部分。在线速率控制部分获取网络状态作为效用函数的输入，采用基于梯度的在线学习方法从效用值决定发送速率。同时，网络状态和QoS需求被输入到离线训练部分，从而根据特定QoS类型解决特定的最优问题。ACCeSS采用轻量化的随机森林回归拟合吞吐量、丢包率、延迟和发送速率之间的回归关系，预测性能指标，实现在网络波动的情况下的高效预测。&lt;/p&gt;
&lt;p&gt;（3）视频内容感知的部分可靠传输机制&lt;/p&gt;
&lt;p&gt;  实时流媒体传输是一时延敏感型应用，在某些情况下，完全可靠传输带来的大量重传可能会恶化传输时延从而造成视频的卡顿。因此，我们实现了视频内容感知的部分可靠传输机制VICTOR，减少低优先级数据的重传，从而提高实时流媒体的QoE。VICTOR中实现了不可靠的流类型。在不可靠流上丢失的数据包将被丢弃，并在数据被提交到应用时，用零值填充相应的数据。根据感知到的优先级信息，流媒体内容将被区分发送到可靠和不可靠流传输。&lt;/p&gt;
&lt;h2 id=&#34;四平台实现&#34;&gt;四、平台实现&lt;/h2&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-3-smart-flycast硬件平台&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture3&#34; srcset=&#34;
               /event/work-sharing-3/picture/picture3_hud0d202719ce924f1b00bf235d3e9c315_560594_bb56d6a8daf0621d2a92562c7e22f83c.webp 400w,
               /event/work-sharing-3/picture/picture3_hud0d202719ce924f1b00bf235d3e9c315_560594_cc60d0b419afe5350286fda3d6c768d6.webp 760w,
               /event/work-sharing-3/picture/picture3_hud0d202719ce924f1b00bf235d3e9c315_560594_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-3/picture/picture3_hud0d202719ce924f1b00bf235d3e9c315_560594_bb56d6a8daf0621d2a92562c7e22f83c.webp&#34;
               width=&#34;760&#34;
               height=&#34;327&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3 Smart-Flycast硬件平台
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;  Smart-Flycast的硬件平台实现如图3所示，平台载体是一架定制Dji四旋翼无人机，该平台配备了Manifold 2机载计算机，其CPU为Intel Corei7-8550U，内存为8GB RAM。实时流媒体画面通过机载高清摄像头收集。无人机通过多个网卡将流媒体传输到云服务器，网卡分别为华为8372 4G模组，以及华为MH5000 5G模组。&lt;/p&gt;
&lt;h2 id=&#34;五总结与展望&#34;&gt;五、总结与展望&lt;/h2&gt;
&lt;p&gt;  Smart-Flycast无人机实时视频传输平台基于多路径传输技术，集成了跨应用层、传输层的协议以及传输算法，提升了无人机流媒体传输的实时性、可靠性与自适应能力。如今，智能技术使能网络是一个发展趋势，在诸多机器学习与智能算法中，强化学习被广泛应用于传输控制，已有研究工作将强化学习应用于拥塞控制、调度、路由优化等决策，以增强传输在多种网络状态中的自适应能力[4]。然而，基于智能的无人机传输决策仍面临亟待解决的挑战：一是智能算法的推理开销会加大无人机能耗，从而影响无人机的续航能力；二是无人机飞行导致网络状态的快速波动，智能算法在面临未知网络状态时，可能会产生输出的不可解释从而作出错误决策，进而影响无人机的任务执行。Smart-Flycast系统集成的三种智能传输算法以轻量的智能算法解决了无人机传输在高动态网络环境的挑战，并可支持多种QoS、QoE需求的挑战。作为一种智能技术使能的原型系统, Smart-Flycast通过引入多路径技术提升了传输的可靠性和稳定性，同时弥补了多路径协议缺乏自适应传输能力的短板，将为无人机实时视频传输提供更多的可能性。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;[1] Song C, Han B, Ji X et al. AI-driven Multipath Transmission: Empowering UAV-based Live Streaming.IEEE Network, 2023.&lt;/p&gt;
&lt;p&gt;[2] Ji X, Han B, Li R, et al. ACCeSS: Adaptive QoS-aware Congestion Control for Multipath TCP[A]. 2022 IEEE/ACM 30th International Symposium on Quality of Service, IWQoS 2022[C]. 2022.&lt;/p&gt;
&lt;p&gt;[3] Li Y, Han B, Han X, et al. VICTOR: Video Content-aware Partially Reliable Transmission over Multipath QUIC. IEEE International Conference on Metaverse Computing, Networking and Applications (IEEE MetaCom 2023) 2023[c].&lt;/p&gt;
&lt;p&gt;[4]Song C, Han B and Su J. 4D-MAP: Multipath Adaptive Packet Scheduling for Live Streaming over QUIC . Comput. Sci. Technol.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AI4Network团队发布多路径流媒体传输加速器“星云”</title>
      <link>https://ai4network.github.io/event/work-sharing-2/</link>
      <pubDate>Wed, 24 May 2023 15:52:45 +0800</pubDate>
      <guid>https://ai4network.github.io/event/work-sharing-2/</guid>
      <description>&lt;p&gt;  近年来，随着实时流媒体等应用种类和数量的增多，流媒体应用对网络带宽、传输稳定性、用户体验的需求不断提升，仅仅依靠TCP协议难以满足高清流媒体传输的个性化服务质量需求。此外，随着网络接入技术的不断发展，终端设备具备WiFi、4G、5G等多种入网手段，流媒体传输性能受制于底层单路径、单一网络传输协议所提供的网络服务，难以在复杂多变的的动态网络环境下提供高质量可靠传输。&lt;/p&gt;
&lt;p&gt;  为此，AI4Network团队自主研发了多路径流媒体传输加速器原型系统——“星云”，该系统可广泛部署于普通端系统设备，仅需配备多张无线网卡(Wifi/4G/5G等)，即可提供高清流媒体、实时流媒体等应用所需的多路径带宽聚合性能和用户体验优化,无额外硬件开销，便捷易用。系统内置TCP/QUIC/MPTCP/MPQUIC等多种网络传输协议，提供灵活的传输协议定制选择功能，核心技术包括自主研发的智能多路径报文调度算法和拥塞控制算法。&lt;/p&gt;
&lt;h2 id=&#34;星云演示视频&#34;&gt;“星云”演示视频&lt;/h2&gt;
&lt;p&gt;  下面是一段“星云”系统的演示视频。客户端配备有一张WiFi网卡和一张4G网卡。我们选择公开的8K视频数据集3D_Mark _Night Raid，视频总时长4分钟，视频帧率60fps。通过测试分析，相比于传统单路径的流媒体播放器，多路径加速后带宽提升了近1倍，端到端延时降低约30%。系统演示了基于TCP(左上)、QUIC(右上)、带有缓冲区膨胀缓解功能(bufferbloat-mitigation)的多路径QUIC(左下)以及我们自主研发的多智能体多路径QUIC(右下)等协议的流媒体传输效果。可以看到，集成基于多智能体的多路径智能调度算法(MARS)的多路径QUIC协议，具有更高的聚合吞吐率，视频播放的卡顿率更低，提供了比其它传输协议更优的用户体验。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://mpvideo.qpic.cn/0bc3k4aa6aaasuagg6lnjvsfav6db5lqadya.f10002.mp4?dis_k=a041c54b80f04d515a1f7546799408bf&amp;amp;dis_t=1696645228&amp;amp;play_scene=10120&amp;amp;auth_info=arGK2b8iVhEYz/3tw1tDWDJpS0k0ZERnNTBWODpSNUxMJz5GTy8LfnoGbBEVelRiOA==&amp;amp;auth_key=9344f0abade4ec8271d631ed3036a908&amp;amp;vid=wxv_2941055962193592320&amp;amp;format_id=10002&amp;amp;support_redirect=0&amp;amp;mmversion=false&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;视频地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;星云系统简介&#34;&gt;“星云”系统简介&lt;/h2&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图1-星云系统部署架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture1&#34; srcset=&#34;
               /event/work-sharing-2/picture/picture1_hu270523d910ec95880d45ca918007c84b_131305_464404160ed66566adb77978d9e1945b.webp 400w,
               /event/work-sharing-2/picture/picture1_hu270523d910ec95880d45ca918007c84b_131305_ab8c11a2b1376007b3f472f327bcca30.webp 760w,
               /event/work-sharing-2/picture/picture1_hu270523d910ec95880d45ca918007c84b_131305_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-2/picture/picture1_hu270523d910ec95880d45ca918007c84b_131305_464404160ed66566adb77978d9e1945b.webp&#34;
               width=&#34;760&#34;
               height=&#34;251&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图1 “星云”系统部署架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;  “星云”系统架构如图1所示。其中硬件组成包括：多个(Wi-Fi/4G)无线网卡。软件系统包括：TCP、QUIC、MPTCP、MPQUIC等传输协议，智能报文调度算法、Web播放器前端。&lt;/p&gt;
&lt;p&gt;  “星云”客户端部署在具有多张网卡的端设备上，Web播放器前端提供解码视频以及自适应码率调整(ABR)功能。客户端底层传输协议是一个集成多种传输协议的智能化定制传输协议栈。&lt;/p&gt;
&lt;p&gt;  “星云”服务端是一个云视频服务器，通过单个网卡向外提供http服务，具有解析http请求并发出响应的能力。对于底层传输层协议，服务端部署有单路径TCP、QUIC以及多路径TCP和多路径QUIC，并且多路径传输协议配备有自主设计的智能多路径报文调度器和拥塞控制算法。&lt;/p&gt;
&lt;p&gt;  当用户通过播放器前端发起浏览视频请求后，云视频服务器端能够根据网络状态以及应用的类型智能地切换和调整不同网络传输协议，并告知客户端，然后与客户端建立适应当前网络状态的传输连接。通过这样的方式，该系统实现传输定制，为用户提供更好的视频流体验质量。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图2-星云系统的智能多路径报文调度算法mars&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture2&#34; srcset=&#34;
               /event/work-sharing-2/picture/picture2_huc4b02acda6f296380ff9f7ea5fff41de_141951_b5100d441be500522fd2a981077c7b66.webp 400w,
               /event/work-sharing-2/picture/picture2_huc4b02acda6f296380ff9f7ea5fff41de_141951_fd6fc4a31463f517d08b7014adf7066b.webp 760w,
               /event/work-sharing-2/picture/picture2_huc4b02acda6f296380ff9f7ea5fff41de_141951_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-2/picture/picture2_huc4b02acda6f296380ff9f7ea5fff41de_141951_b5100d441be500522fd2a981077c7b66.webp&#34;
               width=&#34;579&#34;
               height=&#34;501&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图2 “星云”系统的智能多路径报文调度算法—MARS
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;  我们设计了基于多智能体的多路径智能调度算法，通过智能感知网络状态，获取路径的特征以及网络状态的实时变化，从而让智能算法学习网络状态进行决策。这一决策过程是具有自适应能力以及根据网络状态动态变化能力的。同时算法克服了唯一的智能体为所有的路径提供决策，导致随着路径的增加，学习难度越大的问题，使用多智能体强化学习框架，每条路径看作一个智能体，根据自己的观测进行独立决策，产生更优的决策。另外，调度过程是面向多维服务质量指标的，利用深度强化学习算法从状态中获取信息，面向多维服务质量设计的奖励函数训练，在此基础上作出最优决策。&lt;/p&gt;
&lt;h2 id=&#34;多路径传输协议背景介绍&#34;&gt;多路径传输协议背景介绍&lt;/h2&gt;
&lt;p&gt;  多路径传输协议允许单个连接同时利用多条网络链路，具有带宽聚合和提升传输稳定性等优势。多路径TCP协议(MPTCP)在2013年IETF工作组标准化。然而，MPTCP更新需重新编译操作系统内核，阻碍了其大规模部署。近年来，快速UDP网络连接(Quick UDP Internet Connection, QUIC)协议快速发展，其多路径扩展——多路径QUIC协议(MPQUIC)，作为MPTCP的替代方案被提出。MPQUIC作为一种用户空间协议，可以持续快速升级。&lt;/p&gt;
&lt;p&gt;  QUIC是新型传输层协议，提供具有加密、多流复用、低延迟等特点的数据传输，通过多流复用解决队头堵塞问题，通过0-RTT握手降低传输层握手时延，通过连接迁移为移动性提供更好的支持，通过在用户态实现提供了更好的可扩展性以及部署便捷性，理论上拥有比TCP更好的性能。实际上由于网络环境和设备终端的多样性，以及互联网中存在的各种攻击和各种版本的实现，QUIC在实际网络中的表现并没有达到预期。&lt;/p&gt;
&lt;p&gt;  基于QUIC的多路径传输协议可以利用终端的多种网络接口，聚合多条物理链路，从而提高聚合带宽和传输稳定性。基于QUIC的多路径协议中的路径概念与MPTCP的子流概念类似，在握手阶段，客户端与服务端会先在一条路径上建立QUIC连接，之后每当有新的网络链路需要使用，便添加一个新的路径。基于QUIC的多路径传输设计在概念上超越了MPTCP，它提供了细粒度的流到路径调度，减少了队头阻塞，并且可以更快地建立子流，但在实际应用上缺乏成熟稳定的设计以及大规模的实验验证。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;[1]  J. Iyengar and M. Thomson, “QUIC: A UDP-Based Multiplexed and Secure Transport,” RFC 9000, May 2021. [Online]. Available: &lt;a href=&#34;https://www.rfc-editor.org/info/rfc9000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.rfc-editor.org/info/rfc9000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] A. Ford, C. Raiciu, M. Handley, and O. Bonaventure, “TCP extensions for multipath operation with multiple addresses,” Tech. Rep., 2013.&lt;/p&gt;
&lt;p&gt;[3] Q. De Coninck and O. Bonaventure, “Multipath quic: Design and evaluation,” in Proceedings of the 13th international conference on emerging networking experiments and technologies, 2017, pp. 160–166.&lt;/p&gt;
&lt;p&gt;[4] Han X, Han B, Li R, et al. MARS: An Adaptive Multi-Agent DRL-based Scheduler for Multipath QUIC in Dynamic Networks, 2023 IEEE/ACM 31st International Symposium on Quality of Service (IWQoS). IEEE, 2023, accepted.&lt;/p&gt;
&lt;p&gt;[5] Ji X, Han B, Li R, et al. ACCeSS: Adaptive QoS-aware Congestion Control for Multipath TCP[C]//2022 IEEE/ACM 30th International Symposium on Quality of Service (IWQoS). IEEE, 2022: 1-10.&lt;/p&gt;
&lt;p&gt;[6] Taraghi B, Amirpour H, Timmerer C. Multi-codec ultra high definition 8k mpeg-dash dataset[C]//Proceedings of the 13th ACM Multimedia Systems Conference. 2022: 216-220.&lt;/p&gt;
&lt;p&gt;[7] Ferlin-Oliveira S, Dreibholz T, Alay Ö. Tackling the challenge of bufferbloat in multi-path transport over heterogeneous wireless networks[C]//2014 IEEE 22nd International Symposium of Quality of Service (IWQoS). IEEE, 2014: 123-128.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AI4Network团队在智能多路径QUIC协议方向工作被国际会议IEEE IWQoS2023录用</title>
      <link>https://ai4network.github.io/event/work-sharing-1/</link>
      <pubDate>Tue, 04 Apr 2023 16:42:35 +0800</pubDate>
      <guid>https://ai4network.github.io/event/work-sharing-1/</guid>
      <description>&lt;p&gt;  近日，&lt;strong&gt;AI4Network&lt;/strong&gt;团队在多路径QUIC协议智能调度方面的工作“&lt;strong&gt;MARS: An Efficient Multi-agent DRL-based Scheduler for Multipath QUIC in Dynamic Networks&lt;/strong&gt;”被第31届IEEE/ACM &lt;strong&gt;IWQoS 2023 (IEEE/ACM International Symposium on Quality of Service)国际会议&lt;/strong&gt;录用。&lt;strong&gt;IWQoS&lt;/strong&gt;是网络领域知名国际会议，专注于网络通信的服务质量领域，涵盖所有与&lt;strong&gt;QoS&lt;/strong&gt;(服务质量)相关的最新理论和实验研究工作，长期以来一直是该领域受关注较高的国际会议，属于CCF（中国计算机学会）推荐的B类国际会议，会议录用率长期保持在**20%**左右。该工作作者为2021级硕士研究生韩雪强（第一作者），2023级博士研究生计晓岚，指导老师韩彪。&lt;/p&gt;
&lt;p&gt;  该工作聚焦解决当前多路径QUIC(MPQUIC)协议报文调度器在动态网络环境下无法满足多样化应用QoS需求的难点，提出使用多智能体强化学习框架对服务器端QUIC协议多条路径上的报文发送量进行分布式智能控制，结合多路径拥塞控制决策，在仿真和真实的动态网络环境下，实现了MPQUIC协议吞吐量、传输延迟等性能指标的明显提升，显著减少了乱序报文，降低了接收缓冲区开销。基于该工作团队已同步开发搭建了多路径QUIC协议传输系统，可支持文件、网页、视频、实时视频流、VR/AR等多种网络应用，为设计可移植高可靠的用户态多路径传输方案提供了参考思路。&lt;/p&gt;
&lt;h2 id=&#34;动机与背景&#34;&gt;动机与背景&lt;/h2&gt;
&lt;p&gt;  随着视频流媒体、虚拟现实和增强现实等应用的深入发展，应用对底层传输网络的服务质量提出了更高的要求。多路径传输协议允许单个连接同时利用多个网络链路，如WiFi和LTE。多路径TCP协议（MPTCP）在2013年IETF工作组标准化。然而，MPTCP需要操作系统支持，阻碍了其大规模部署。快速UDP网络连接(Quick UDP Internet Connection, QUIC)协议深入发展，其多路径扩展，多路径QUIC协议（MPQUIC），作为MPTCP的替代方案被提出。MPQUIC作为一种用户空间协议，可以持续快速升级。&lt;/p&gt;
&lt;p&gt;  MPQUIC的关键问题之一是数据包调度。根据MPQUIC的大规模部署实验，其存在严重的队头阻塞问题:高延迟路径上调度的数据包到达时间晚于低延迟路径上的数据包，导致乱序数据包到达。由于队头（Head of Line, HoL）阻塞问题，接收端不得不分配较大内存来缓存乱序数据包。通过大量的预备实验分析，我们观测到接收方缓冲区的大小严重影响了MPQUIC的吞吐量性能（图1）。此外，随着实时视频流等应用的发展，应用迫切追求低延迟，而大多数的调度器仅针对特定应用需求设计。例如，基于强化学习(RL )的调度器 Peekaboo只关注最大化吞吐量，而不考虑数据包所经历的延迟。另一方面，bufferbloat-mitigation(BM)算法旨在降低缓存膨胀的影响以获得低延迟，但无法实现高吞吐量。多路径调度性能与应用需求仍有差距，如图2所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图1-不同大小缓冲区下多路径调度器的吞吐量&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture0&#34; srcset=&#34;
               /event/work-sharing-1/picture/picture0_hu4486ac4b89fe44baae6e6e44b1f245f1_24175_d71173bfc8f0b95d8bfecf7264c94dbe.webp 400w,
               /event/work-sharing-1/picture/picture0_hu4486ac4b89fe44baae6e6e44b1f245f1_24175_b75befa9e38dad5fb13ef8fbfa550043.webp 760w,
               /event/work-sharing-1/picture/picture0_hu4486ac4b89fe44baae6e6e44b1f245f1_24175_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-1/picture/picture0_hu4486ac4b89fe44baae6e6e44b1f245f1_24175_d71173bfc8f0b95d8bfecf7264c94dbe.webp&#34;
               width=&#34;257&#34;
               height=&#34;197&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图1 不同大小缓冲区下多路径调度器的吞吐量
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图2-不同多路径调度器的rtt百分位分布图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture1&#34; srcset=&#34;
               /event/work-sharing-1/picture/picture1_hu189613c1ffbbdb0ac692b764000cd156_29799_4ddc93be90a6fd9d782e2b6dcfd905df.webp 400w,
               /event/work-sharing-1/picture/picture1_hu189613c1ffbbdb0ac692b764000cd156_29799_c41550a0aa3e828212fe56918f6caee8.webp 760w,
               /event/work-sharing-1/picture/picture1_hu189613c1ffbbdb0ac692b764000cd156_29799_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-1/picture/picture1_hu189613c1ffbbdb0ac692b764000cd156_29799_4ddc93be90a6fd9d782e2b6dcfd905df.webp&#34;
               width=&#34;261&#34;
               height=&#34;196&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图2 不同多路径调度器的RTT百分位分布图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;设计方案&#34;&gt;设计方案&lt;/h2&gt;
&lt;p&gt;  针对上述问题，该工作提出使用多智能体强化学习的方法，结合多目标奖励函数来实现在动态网络环境下对应用多样化QoS需求的动态适应。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.多智能体强化学习&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  1）为什么使用多智能体强化学习&lt;/p&gt;
&lt;p&gt;  从方法论的角度，我们将多路径调度视为一个决策问题，采用强化学习(RL)方法进行求解。与使用规则式策略的启发式方法不同，基于RL的调度器通过学习产生能够适应动态网络环境的数据包调度策略。之前的研究工作也考虑了将RL方法用于数据包调度问题：如Peekaboo使用在线RL算法生成调度策略，但收敛时间是在线方案的一个基本问题，并未得到很好解决；ReLeS探索了通过深度强化学习(DRL)方法来解决MPTCP中的调度问题，使用单智能体DRL为所有路径生成连接级控制策略。然而，当路径数量增加时，唯一的智能体学习最优调度策略的能力受限。因此在本工作中，我们应用多智能体强化学习(MADRL)方法对每条路径进行单独控制，以减轻单个智能体的负担，生成更优的策略。&lt;/p&gt;
&lt;p&gt;  2）设计框架&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图3-mars的实现框架图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture2&#34; srcset=&#34;
               /event/work-sharing-1/picture/picture2_hu15bd4a66fe83590dbad30f9a3ff41ca3_46444_8cc2979df5d684792121a3b3ebbc1cae.webp 400w,
               /event/work-sharing-1/picture/picture2_hu15bd4a66fe83590dbad30f9a3ff41ca3_46444_bfd2b6de334cdcdaa806670e35bf8a2b.webp 760w,
               /event/work-sharing-1/picture/picture2_hu15bd4a66fe83590dbad30f9a3ff41ca3_46444_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-1/picture/picture2_hu15bd4a66fe83590dbad30f9a3ff41ca3_46444_8cc2979df5d684792121a3b3ebbc1cae.webp&#34;
               width=&#34;293&#34;
               height=&#34;253&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图3 MARS的实现框架图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;  MARS框架如图3所示。MARS采用了MADDPG算法，一种多智能体和演员-评论家深度强化学习算法。在MARS中，每个智能体都有一个演员和评论家神经网络。我们采用异步训练算法，将数据收集和模型训练分离，以保证实时的数据包调度。因此，MARS框架主要由在线执行和离线训练两部分组成。&lt;/p&gt;
&lt;p&gt;  在线执行。在线执行过程中(图3右半部分)，运行在发送端(服务器)的智能体感知网络环境，获取网络状态 $O_{i,t}$。然后，智能体将它们输入到执行器神经网络，该神经网络输出动作 $∏(O_{i,t})$。深度强化学习智能体面临的一个根本性挑战是解决探索与利用的困境。为了使智能体能够更好地探索未知环境，我们在演员神经网络生成的动作中加入衰减高斯噪声，可以表示为 $a_{i,t} = ∏(O_{i,t}) + N ( 0,σ_{i,t})$。智能体执行动作并得到结果奖励 $r_{i，t}$，然后转移到下一个新状态 $O_{i,t+1}$。为了有效地从经验中学习，智能体在一步转移中收集状态、动作和奖励，并将它们打包成一个元组 $&amp;lt;O_{i,t}，O_{_i,t}，a_{i,t}，a_{_i,t}，r_{i,t}，O_{i,t+1}，O_{i,t+1}&amp;gt;$，并将元组存储到经验回放缓冲区$D_i$中。&lt;/p&gt;
&lt;p&gt;  离线训练。在离线训练过程中(图3左图部分)，智能体从经验回放缓冲区中采样，然后使用深度确定性策略梯度训练算法训练演员和评论家神经网络。每次训练后，MARS将训练好的演员神经网络与调度器进行同步，使其向最优策略移动。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.多目标奖励函数设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  考虑具有n条路径(记N = { 1 , &amp;hellip; , n })的多路径传输协议。它的网络资源有限，包括缓冲区和数据包等。这些资源被路径共享。在MARS中，每条路径都有一个带着独立奖励函数的深度强化学习智能体。对于传统的单智能体深度强化学习智能体，它自私地最大化自身奖励。但在MARS中，如果所有的智能体简单地最大化自己的奖励，并不能使多路径传输协议获得最大的性能。因此，我们将多路径传输协议调度问题看成一个一般和的n人博弈，其中每个智能体是一个玩家。我们通过设计利他奖励项，将利他行为引入到每个智能体中。这说明智能体并不是单纯最大化自身的性能，还关心其他路径的性能。它们相互竞争资源，同时为了获得更好的性能，它们合作将所有的数据传输到接收端。此外，在奖励函数的设计中，我们考虑了吞吐量、时延和乱序队列大小。智能体i的奖励函数记为：&lt;/p&gt;



$$
r_{i,t} = V^{th}-\beta V^{RTT} - \zeta V^{OFO}
$$

&lt;h2 id=&#34;实验验证&#34;&gt;实验验证&lt;/h2&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图4-网络拓扑图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture3&#34; srcset=&#34;
               /event/work-sharing-1/picture/picture3_hu0907e9451f8cc848792f3fb89b198d16_19264_b025e5b53cbdf5bdd61104c86796d462.webp 400w,
               /event/work-sharing-1/picture/picture3_hu0907e9451f8cc848792f3fb89b198d16_19264_d5bb09df329b706da0847c1b0d6a76c3.webp 760w,
               /event/work-sharing-1/picture/picture3_hu0907e9451f8cc848792f3fb89b198d16_19264_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-1/picture/picture3_hu0907e9451f8cc848792f3fb89b198d16_19264_b025e5b53cbdf5bdd61104c86796d462.webp&#34;
               width=&#34;553&#34;
               height=&#34;110&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图4 网络拓扑图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;  仿真实验采用如图4所示的网络拓扑结构。对于两条路径，我们分别设定了根据真实实验中的测量值选择的具体网络特征。采用32MB的文件下载应用程序进行性能评估。每个实验重复了20次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.不同接收方缓冲区下的吞吐表现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  图5展示了不同调度器在不同接收缓存大小下的聚合吞吐量。当接收缓存大小受限(&amp;lt;3MB)时，我们的调度器相比RR可以提高约16 %的吞吐量。当接收缓存足够大(≥3MB)时，没有HoL阻塞，因此6个调度器都能获得较好的带宽聚合效果。但是MARS的表现仍然优于其它调度器。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图5-不同调度器在不同接收缓存大小下的聚合吞吐量&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture4&#34; srcset=&#34;
               /event/work-sharing-1/picture/picture4_hu3873e819bd0faaf373a54aa3bcb4c469_40485_fbd36052c1d8994ff5205ca072ab19db.webp 400w,
               /event/work-sharing-1/picture/picture4_hu3873e819bd0faaf373a54aa3bcb4c469_40485_e31e761e0b3385e26410065bc806c69f.webp 760w,
               /event/work-sharing-1/picture/picture4_hu3873e819bd0faaf373a54aa3bcb4c469_40485_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-1/picture/picture4_hu3873e819bd0faaf373a54aa3bcb4c469_40485_fbd36052c1d8994ff5205ca072ab19db.webp&#34;
               width=&#34;333&#34;
               height=&#34;253&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图5 不同调度器在不同接收缓存大小下的聚合吞吐量
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.减少乱序数据包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  我们使用乱序（OFO）队列大小作为度量。OFO队列规模越大，调度器性能越差。图 6给出了不同接收缓冲区大小下不同调度器的平均OFO队列大小。其他调度器在接收缓冲区大小有限的情况下可以保持较小的OFO队列大小，但随着接收缓冲区大小的增加，OFO 队列大小急剧增加。而MARS可以保持非常小的 OFO 队列大小，并且由于OFO队列大小的反馈，受接收缓冲区大小的影响较小。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图6-不同接收缓冲区大小下不同调度器的平均ofo队列大小&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture5&#34; srcset=&#34;
               /event/work-sharing-1/picture/picture5_hu9234cf72964adb707e63ba5faca90230_41668_caf1e5492cc26ef8e7b3ead1210d252b.webp 400w,
               /event/work-sharing-1/picture/picture5_hu9234cf72964adb707e63ba5faca90230_41668_90c171e180aec943e1e6036f688c61c0.webp 760w,
               /event/work-sharing-1/picture/picture5_hu9234cf72964adb707e63ba5faca90230_41668_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-1/picture/picture5_hu9234cf72964adb707e63ba5faca90230_41668_caf1e5492cc26ef8e7b3ead1210d252b.webp&#34;
               width=&#34;267&#34;
               height=&#34;199&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图6 不同接收缓冲区大小下不同调度器的平均OFO队列大小
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.降低传输延迟&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  图7给出了RTT的百分位分布。从图7中我们可以观察到MARS比其他调度器实现了更小的RTT。这是因为与BM算法相比，MARS算法根据当前网络状态更加智能地做出决策，以降低数据包排队时延。同时，MARS充分利用快速路径来满足应用的低延迟需求。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图7-rtt的百分位分布图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture6&#34; srcset=&#34;
               /event/work-sharing-1/picture/picture6_hu4d99e9d74c337d3fd1183b9664c081b0_29015_2bae6db0f5d52edccac389f7d031fa6d.webp 400w,
               /event/work-sharing-1/picture/picture6_hu4d99e9d74c337d3fd1183b9664c081b0_29015_c03bba8827b0126d22cc72db277cacae.webp 760w,
               /event/work-sharing-1/picture/picture6_hu4d99e9d74c337d3fd1183b9664c081b0_29015_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-1/picture/picture6_hu4d99e9d74c337d3fd1183b9664c081b0_29015_2bae6db0f5d52edccac389f7d031fa6d.webp&#34;
               width=&#34;255&#34;
               height=&#34;193&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图7 RTT的百分位分布图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.真实网络环境下的性能表现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  通过评估不同调度器的下载时间来研究MARS在异构网络中的性能。我们 通过改变下载大小来模拟不同的流量类型。对于2MB的下载文件大小，MARS实现了与 Peekaboo相近的下载时间，但是与其他调度器相比，下载时间最低。然而，随着下载文件大小越来越大，MARS的优势更加明显。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图8-真实网络环境下不同调度器的文件下载时间&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;picture7&#34; srcset=&#34;
               /event/work-sharing-1/picture/picture7_hu0ff6d31df7d1c2bc2cb673862825ba24_19348_f7cd47a90d4862358b886f1e17aac695.webp 400w,
               /event/work-sharing-1/picture/picture7_hu0ff6d31df7d1c2bc2cb673862825ba24_19348_77f68299ebea6bc83b45fe0b9aaa5a92.webp 760w,
               /event/work-sharing-1/picture/picture7_hu0ff6d31df7d1c2bc2cb673862825ba24_19348_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://ai4network.github.io/event/work-sharing-1/picture/picture7_hu0ff6d31df7d1c2bc2cb673862825ba24_19348_f7cd47a90d4862358b886f1e17aac695.webp&#34;
               width=&#34;262&#34;
               height=&#34;201&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图8 真实网络环境下不同调度器的文件下载时间
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;  本工作提出了一种基于多智能体强化学习的 MPQUIC调度器 MARS，为适应不同接收端缓存大小和不同应用的QoS需求，MARS利用多智能体强化学习（MADRL） 技术在每条路径上独立生成数据包调度策略。同时，我们设计了一个多目标奖励函数来表征应用程序的QoS需求和乱序队列大小对协议性能的影响。我们在仿真和真实环境下评估了MARS，结果表明MARS的性能表现显著优于现有的多路径调度器。&lt;/p&gt;
&lt;p&gt;  该工作的源代码和原型系统将于近期发布，敬请关注。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
